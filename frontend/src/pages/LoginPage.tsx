import { FormEvent, useState } from "react";
import { useAuth } from "../providers/AuthProvider";
import { useLocation, useNavigate } from "react-router-dom";
import { AuthContextType, AuthErrorType, LoginCredentials } from "../types/auth";
import DefaultLayout from "@/layouts/default";
import { Button, Input, Checkbox, Link, Form, Card } from "@heroui/react";
import { Icon } from "@iconify/react";

const LoginPage = () => {
  // –°—Ç–µ–π—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã
  const [formData, setFormData] = useState<LoginCredentials>({
    phone_number: "",
    password: "",
  });

  // –ü–æ–ª—É—á–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  const { login, isLoading, error, clearError } = useAuth() as AuthContextType;

  // –î–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞
  const navigate = useNavigate();
  const location = useLocation();
  const from = location.state?.from?.pathname || "/";

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø–∞—Ä–æ–ª—è
  const [isVisible, setIsVisible] = useState(false);

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞
  const [hasTriedLogin, setHasTriedLogin] = useState(false);

  const toggleVisibility = () => {
    setIsVisible(!isVisible);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—à–∏–±–∫–∏ —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –∏–∫–æ–Ω–∫–æ–π
  const renderError = () => {
    if (!error || !hasTriedLogin) return null;
    
    let iconName = "solar:danger-triangle-bold";
    let colorClass = "text-danger";
    
    switch (error.type) {
      case AuthErrorType.INVALID_CREDENTIALS:
        iconName = "solar:lock-unlocked-bold";
        break;
      case AuthErrorType.NETWORK_ERROR:
        iconName = "solar:wifi-problem-bold";
        break;
      case AuthErrorType.MISSING_CREDENTIALS:
        iconName = "solar:document-missing-bold";
        break;
      case AuthErrorType.SESSION_EXPIRED:
        iconName = "solar:clock-circle-bold";
        break;
      case AuthErrorType.AUTH_ERROR:
        iconName = "solar:user-cross-bold";
        break;
      default:
        iconName = "solar:danger-triangle-bold";
    }
    
    return (
      <Card className={`${colorClass} p-3 mb-2`}>
        <div className="flex items-center gap-2">
          <Icon className="text-xl" icon={iconName} />
          <span>{error.message}</span>
        </div>
      </Card>
    );
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π –≤–≤–æ–¥–∞
  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    
    // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if (name === "phone_number") {
      // –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã, –∫—Ä–æ–º–µ –ø–ª—é—Å–∞ –≤ –Ω–∞—á–∞–ª–µ
      let formattedValue = value.replace(/[^\d+]/g, "");
      
      // –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –ø—É—Å—Ç–æ–π, –¥–æ–±–∞–≤–ª—è–µ–º +7
      if (formattedValue === "") {
        formattedValue = "+7";
      } 
      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –Ω–æ–º–µ—Ä –±–µ–∑ +7 –≤ –Ω–∞—á–∞–ª–µ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
      else if (!formattedValue.startsWith("+")) {
        formattedValue = "+" + formattedValue;
      } 
      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –Ω–æ–º–µ—Ä –±–µ–∑ 7 –ø–æ—Å–ª–µ +, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
      else if (formattedValue === "+") {
        formattedValue = "+7";
      }
      
      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –Ω–æ–º–µ—Ä–∞ (–≤–∫–ª—é—á–∞—è +7) –¥–æ 12 —Å–∏–º–≤–æ–ª–æ–≤
      formattedValue = formattedValue.substring(0, 12);
      
      setFormData((prev) => ({ ...prev, [name]: formattedValue }));
    } else {
      setFormData((prev) => ({ ...prev, [name]: value }));
    }
    
    clearError(); // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫—É –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö
    setHasTriedLogin(false); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–æ–ø—ã—Ç–∫–∏ –≤—Ö–æ–¥–∞
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
  const handleSubmit = async (e: FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    
    setHasTriedLogin(true);
    
    try {
      await login(formData);
      // –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—Ö–æ–¥–∞ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–ª–∏ –Ω–∞ –≥–ª–∞–≤–Ω—É—é
      navigate(from, { replace: true });
    } catch (err) {
      // –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ login
    }
  };

  return (
    <DefaultLayout>
      <div className="flex h-full w-full items-center justify-center">
        <div className="flex w-full max-w-sm flex-col gap-4 rounded-large px-8 pb-10 pt-6">
          <p className="pb-4 text-left text-3xl font-semibold">
            –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å
            <span aria-label="emoji" className="ml-2" role="img">
              üëã
            </span>
          </p>
          {renderError()}
          <Form className="flex flex-col gap-4" validationBehavior="native" onSubmit={handleSubmit}>
            <Input
              isRequired
              label="–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
              labelPlacement="outside"
              name="phone_number"
              placeholder="+7XXXXXXXXXX"
              type="tel"
              variant="bordered"
              value={formData.phone_number || "+7"}
              onChange={handleChange}
              isInvalid={!!error && (error.type === AuthErrorType.INVALID_PHONE_FORMAT || error.type === AuthErrorType.INVALID_CREDENTIALS)}
            />
            <Input
              isRequired
              endContent={
                <button type="button" onClick={toggleVisibility}>
                  {isVisible ? (
                    <Icon
                      className="pointer-events-none text-2xl text-default-400"
                      icon="solar:eye-closed-linear"
                    />
                  ) : (
                    <Icon
                      className="pointer-events-none text-2xl text-default-400"
                      icon="solar:eye-bold"
                    />
                  )}
                </button>
              }
              label="–ü–∞—Ä–æ–ª—å"
              labelPlacement="outside"
              name="password"
              placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å"
              type={isVisible ? "text" : "password"}
              variant="bordered"
              value={formData.password}
              onChange={handleChange}
              isInvalid={!!error && error.type === AuthErrorType.INVALID_CREDENTIALS}
            />
            <div className="flex w-full items-center justify-between px-1 py-2">
              <Checkbox defaultSelected name="remember" size="sm">
                –ó–∞–ø–æ–º–Ω–∏—Ç—å –º–µ–Ω—è
              </Checkbox>
              <Link className="text-default-500" href="#" size="sm">
                –ó–∞–±—ã–ª–∏ –ø–∞—Ä–æ–ª—å?
              </Link>
            </div>
            <Button className="w-full" color="primary" type="submit" disabled={isLoading}>
              {isLoading ? "–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤—Ö–æ–¥..." : "–í–æ–π—Ç–∏"}
            </Button>
          </Form>
          <p className="text-center text-small">
            <Link href="/register" size="sm">
              –°–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç
            </Link>
          </p>
        </div>
      </div>
    </DefaultLayout>
  );
};

export default LoginPage; 